# 기본 DFS 구현
# 목적 : 탐색하는 순서대로 노드번호 출력
그래프 = [ # DFS가 돌아다닐 지도 역할
  [], # 비워놓을 것!!! → 이유 : 1부터 시작해야해서!!
  [2, 3, 8], # 1번노드와 연결된 노드들 번호 리스트
  [1, 7], # 2번노드와 연결된 노드들 번호 리스트
  [1, 4, 5], # 3번노드와 연결된 노드들 번호 리스트
  [3, 5], # 4번노드와 연결된 노드들 번호 리스트
  [3, 4], # 5번노드와 연결된 노드들 번호 리스트
  [7], # 6번노드와 연결된 노드들 번호 리스트
  [2, 6, 8], # 7번노드와 연결된 노드들 번호 리스트
  [1, 7] # 8번노드와 연결된 노드들 번호 리스트
]

# 방문여부[노드번호] = False → 해당 노드 번호는 방문했다는 사실이 False!! : 방문 안했다는 뜻
방문여부 = [False] * (8 + 1) # x (가장 마지막 번호 + 1)


# v = []
# for i in range(9):
#   v.append(False)
#   print("방문여부[",i,"] = ", False, sep="")
# # print(v)

# 탐색시작!
def dfs(그래프, 현재노드번호, 방문여부):
  print("현재 방문한 노드 번호 :", 현재노드번호)
  방문여부[현재노드번호] = True  # 방문표시해줌 → 나중에 또 탐색 안하기 위해!

  # 다음에 방문할 곳을 찾는 코드!
  # 방문할 수 있는 조건에 대해!!
  # 1. 연결되어 있어야 함 → 그래프[현재노드번호]
  # 2. 다음에 방문할 곳이 방문을 한적이 없어야 함
  # 2개 조건 만족 → 탐색시작!!
  for 다음에_방문할_노드번호 in 그래프[현재노드번호]: #
    if 방문여부[다음에_방문할_노드번호] == False:
      # 다음에_방문할_노드번호 를 탐색시작해야 함
      dfs(그래프, 다음에_방문할_노드번호, 방문여부)

dfs(그래프, 1, 방문여부)